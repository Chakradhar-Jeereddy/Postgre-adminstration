the backup is called from python program
from pg_library import PgBackRest

cat /etc/pgbackrest.conf
[global]
start-fast=y
stop-auto=y
compress-level=3
archive-async=y
repo1-retention-full=31
repo1-s3-verify-ssl=y
repo1-type=s3
repo1-s3-bucket=<bucket name>
repo1-s3-key=
repo1-s3-key-secret=
repo1-s3-endpoint=
repo1-path=
repo1-s3-ca-file=
repo1-s3-region=eu-fr-paris

[global:backup]
parallel-max=2


[global:archive_push]
parallel-max=2
spool-path=/data/pgarchive01

[global:archive_get]
archive-get-max-queue=1g
parallel-max2

[global:restore]
process-max=8

[PGCUSTER]
pg1-path= $PGDATA
pg1-port=12400





Capability
Open source tool offers parallel backups, incremental backups, differential backups and can stream a backup to cloud.
This is very suitable for database environments that are several terabytes in size.

Deployment steps -  
PGDG repository should be configured.

For centos 7.x
#yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm

For centos 8.x
#dnf install https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm

Install pgBackRest
#yum install pgbackrest

If it fails with dependency issues for some packages, install epel-release
#yum install epel-release

How to take backup using pgBackRest

1) create a config file pgbackrest.conf
# sudo bash -c 'cat << EOF > /etc/pgbackrest.conf
 [global]
 repo1-host=backupserver.percona.com
 repo1-path=/backup_directory
 repo1-retention-full=2
 log-level-stderr=error
 log-path=/backup/db/log
 [percdb]
 pg1-host=192.168.70.10
 # The above line must be removed when the backup is performed locally.
 pg1-path=/var/lib/pgsql/13/data
 pg1-port=5432
 EOF'

2) Enable archive mode
 psql -c "ALTER SYSTEM SET archive_mode = 'on'"
 psql -c "ALTER SYSTEM SET archive_command = 'pgbackrest --stanza=percdb archive-push %p'"
 sudo systemctl restart postgresql-12

3) Ensure following parameters are set in postgres config file
wal_level=replica
archive_mode=on
archive_comand="pgbackrest --stanza=mydb --archive-push %p"
3) Initialize stanza for the database to be backed up and then validate to see any errors.
a) create 
$ pgbackrest stanza-create --stanza=percdb --log-level-console=info
b) validate
$ pgbackrest check --stanza=percdb --log-level-console=info
c) start backup
$ pgbackrest backup --stanza=percdb --log-level-console=info
d) list backup
$ pgbackrest info
 
Note - 
A stanza is used to define the backup configuration for a specific PostgreSQL database cluster.
repo1-path => Is the location where backups and archives needs to stored.
repo1-retention-full => how many backups needs to be retained
pg1-host => indicates the remote PostgreSQL cluster that is being backed up
pg1-path => Location of data directory of the cluster

. If archive_mode needs to be changed, a restart is required, else, just a reload should be sufficient.


Restoration steps 
1) We must have pgBackRest installed on the target server where the backup is being restored to. 
2) We should have a new or an empty directory available for the database backup to be restored.
3) Enable trusted SSH authentication using public keys between the target server and the backup server.


How to do it,

1) $sudo mkdir /var/lib/pgsql/13/data/
2) $ sudo chmod 0700 /var/lib/pgsql/13/data
3) Create the pgBackRest configuration file that is the same as the backup server.

 sudo bash -c 'cat << EOF > /etc/pgbackrest.conf
 [global]
 repo1-host=backupserver.percona.com
 repo1-path=/backup_directory
 repo1-retention-full=2
 log-level-stderr=error
 log-path=/backup/db/log
 [percdb]
 pg1-host=192.168.70.10
 pg1-path=/var/lib/pgsql/13/data
 pg1-port=5432
 EOF'
 
 4) Restore backup of stanza to target database server 
 pgbackrest restore --stanza=percdb --log-level-console=info

5) Start the service 
sudo systemctl start postgresql-13

Version of pgbackrest
pgbckrest version => 2.51

Compression - default is gzip (level 6)
              best is Z-standard (level3)

Features
pgbackuprest resume (starts from it stopped)

Directories that I need for backup
log
repo
spool

-> archive_push - Allows postgresql to push completed wals to repo
-> archive_get  - Allows postgresql to get completed wals from repo

What is archive_async=y?
If a DB is hosting write intensive applications, postgres not able to push archives at the rate at which transactions being generated, it can take help of pgbackuprest.
When the archive_async is enabled for archive_push, it will check the wals available for archiving and ships to repo and writes the info in spool directory. Postgres look at spool location 
to confirm the archives already shipped instead checking in repo, on top of it use parallel_max to even speed up the shipping.

How to offload backups on standby?
put backup-standby=y, In stanza it will check the fist live standby in list and pics from there.

How to check archiving is slow?
 select last_archived_wal from pg_stat_archiver;
    last_archived_wal
--------------------------
 000000050000000100000042

select sent_lsn,write_lsn,flush_lsn from pg_stat_replication;
sent_lsn - wal send but not sure if it was received
write_lsn - wal was recived and written to cache
flush_lsn - wal is written to disk

Full backup - --type=full or --type=inc or --type=diff
restore  --type=time "--target=dd/mm/yyy:hh:mm:ss"

=> command to restore backup to end of stream
pgbackuprest --stanza=precdb --log-level-console=info restore (after restore make sure archive command is poiting to different repo)
=> commad to restore singe database
pgbackuprest --stanza=precdb --log-level-console=info restore --db-include=chakra (this will resote selected database files and other files also but empty, it saves log of storage)
=> to exclude databases from cluster use --db-exclude
=> command to restore database to sepecific point in time
pgbackuprest --stanza=precdb --log-level-console=info --type=time "--target=dd/mm/yyy:hh:mm:ss" restore

=> command to restore cluster on different database and enabling streaming
pgbackuprest --stanza=precdb --log-level-console=info --type=standby --recovery-option=primary_conninfo="user=rep password='' host='' app_name=spare' restore

=> what is the role of --delta, it restore only the missing files and preseves the files already exists.


What are the restore types?
--target = target to reach or immediate
--recovery_target_lsn 
--recovery target_timeline
--recovery_target_name = restore point
-- recovery_target_xid = 
What is archive_push_queue_max=10g
Availability over data loss.
If repo is not available and network is slow, the archives starts pilling up and at some point production will freeze to operate.
Monitoring of the continus archiving is important, if the cap is reached, it will simply drop the archives to maintain space in wall directoy and keep prod live.
When this happens, need to fix the archive process and initiate immediate full backup. postgres wont blocked but it generated missing archives.

To check logging, set log-level-console=debug\

How to validate the backup is good?
pgbackuprest only checks weather the old and recent lsn is available to ensure backup consitency, but it wont check if archives in between are available.
The most relaible validation is restore and test backup.
You can use pgbackuprest --stanza=db verify (but it wont garentee)





=> 










